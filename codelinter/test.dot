digraph G {
  1 [ label="edu.kit.informatik.cmd.Command" ];
  2 [ label="E" ];
  3 [ label="edu.kit.informatik.cmd.CommandBuilder$CommandBuilderParameter" ];
  4 [ label="edu.kit.informatik.cmd.CommandBuilder" ];
  5 [ label="edu.kit.informatik.cmd.CommandException" ];
  6 [ label="edu.kit.informatik.cmd.CommandResolver" ];
  7 [ label="edu.kit.informatik.model.rollingstock.Coach$Type" ];
  8 [ label="edu.kit.informatik.model.rollingstock.VisualRepresentation" ];
  9 [ label="edu.kit.informatik.model.rollingstock.Coach" ];
  10 [ label="edu.kit.informatik.model.IdSupplier" ];
  11 [ label="edu.kit.informatik.model.rollingstock.RollingStock" ];
  12 [ label="edu.kit.informatik.model.train.Train" ];
  13 [ label="edu.kit.informatik.StringConstants" ];
  14 [ label="edu.kit.informatik.model.rollingstock.Engine$Type" ];
  15 [ label="edu.kit.informatik.model.rollingstock.Engine" ];
  16 [ label="edu.kit.informatik.model.rollingstock.PoweredRollingStock" ];
  17 [ label="edu.kit.informatik.model.rollingstock.TrainException" ];
  18 [ label="edu.kit.informatik.model.rollingstock.TrainSet" ];
  19 [ label="edu.kit.informatik.model.track.StandardTrack" ];
  20 [ label="edu.kit.informatik.model.Vector" ];
  21 [ label="edu.kit.informatik.model.track.Track" ];
  22 [ label="edu.kit.informatik.model.track.TrackException" ];
  23 [ label="edu.kit.informatik.model.track.Switch" ];
  24 [ label="edu.kit.informatik.model.train.TrainPoint" ];
  25 [ label="edu.kit.informatik.model.Collisions" ];
  26 [ label="edu.kit.informatik.repository.RollingStockRepository" ];
  27 [ label="edu.kit.informatik.repository.TrackRepository" ];
  28 [ label="edu.kit.informatik.Simulation" ];
  29 [ label="edu.kit.informatik.Terminal" ];
  30 [ label="edu.kit.informatik.UI" ];
  4 -> 3 [ label="addParameter(java.lang.String)" ];
  4 -> 3 [ label="sep(java.lang.String)" ];
  4 -> 3 [ label="addIntParameter()" ];
  4 -> 3 [ label="new CommandBuilderParameter(java.lang.String)" ];
  4 -> 3 [ label="->regex" ];
  4 -> 3 [ label="->OPTIONAL_SIGN" ];
  4 -> 3 [ label="->UNSIGNED_INT_MATCHER" ];
  4 -> 3 [ label="->UNSIGNED_DOUBLE_MATCHER" ];
  4 -> 3 [ label="->WORD_MATCHER" ];
  4 -> 3 [ label="->BOOLEAN_MATCHER" ];
  6 -> 1 [ label="commands#1" ];
  6 -> 1 [ label="execute(java.util.regex.MatchResult)" ];
  6 -> 5 [ label="new CommandException(java.lang.String)" ];
  7 -> 8 [ label="visualRepresentation#0" ];
  7 -> 8 [ label="new VisualRepresentation(java.lang.String[])" ];
  7 -> 9 [ label="->PASSENGER_SHORT" ];
  7 -> 9 [ label="->FREIGHT_SHORT" ];
  7 -> 9 [ label="->SPECIAL_SHORT" ];
  9 -> 10 [ label="ID_SUPPLIER#0" ];
  9 -> 7 [ label="type#0" ];
  9 -> 11 [ label="new RollingStock(int,boolean,boolean,boolean)" ];
  9 -> 10 [ label="nextId()" ];
  9 -> 11 [ label="getTrain()" ];
  9 -> 12 [ label="getId()" ];
  9 -> 7 [ label="getShortRepresentation()" ];
  9 -> 11 [ label="getLength()" ];
  9 -> 11 [ label="hasFrontCoupling()" ];
  9 -> 11 [ label="hasBackCoupling()" ];
  9 -> 7 [ label="getGraphicalRepresentation()" ];
  9 -> 10 [ label="removeId(int)" ];
  9 -> 10 [ label="new IdSupplier()" ];
  9 -> 8 [ label="new VisualRepresentation(java.lang.String[])" ];
  9 -> 7 [ label="new Type(java.lang.String,java.lang.String[])" ];
  9 -> 13 [ label="->SPACE" ];
  9 -> 11 [ label="->STANDARD_COUPLING" ];
  9 -> 7 [ label="->shortRepresentation" ];
  9 -> 7 [ label="->visualRepresentation" ];
  14 -> 8 [ label="visualRepresentation#0" ];
  14 -> 8 [ label="new VisualRepresentation(java.lang.String[])" ];
  14 -> 15 [ label="->ELECTRICAL_SHORT" ];
  14 -> 15 [ label="->STEAM_SHORT" ];
  14 -> 15 [ label="->DIESEL_SHORT" ];
  15 -> 14 [ label="type#0" ];
  15 -> 16 [ label="new PoweredRollingStock(int,boolean,boolean,java.lang.String,java.lang.String)" ];
  15 -> 14 [ label="getVisualRepresentation()" ];
  15 -> 11 [ label="getTrain()" ];
  15 -> 12 [ label="getId()" ];
  15 -> 14 [ label="getShortRepresentation()" ];
  15 -> 16 [ label="getTypeSeries()" ];
  15 -> 16 [ label="getName()" ];
  15 -> 11 [ label="getLength()" ];
  15 -> 11 [ label="hasFrontCoupling()" ];
  15 -> 11 [ label="hasBackCoupling()" ];
  15 -> 8 [ label="new VisualRepresentation(java.lang.String[])" ];
  15 -> 14 [ label="new Type(java.lang.String,java.lang.String[])" ];
  15 -> 13 [ label="->SPACE" ];
  15 -> 11 [ label="->STANDARD_COUPLING" ];
  15 -> 14 [ label="->shortRepresentation" ];
  15 -> 14 [ label="->visualRepresentation" ];
  16 -> 11 [ label="new RollingStock(int,boolean,boolean,boolean)" ];
  16 -> 17 [ label="new TrainException(java.lang.String)" ];
  16 -> 9 [ label="->PREFIX" ];
  11 -> 12 [ label="train#0" ];
  11 -> 16 [ label="getId()" ];
  11 -> 17 [ label="new TrainException(java.lang.String)" ];
  17 -> 5 [ label="new CommandException(java.lang.String)" ];
  18 -> 16 [ label="new PoweredRollingStock(int,boolean,boolean,java.lang.String,java.lang.String)" ];
  18 -> 16 [ label="getTypeSeries()" ];
  18 -> 11 [ label="getTrain()" ];
  18 -> 12 [ label="getId()" ];
  18 -> 16 [ label="getName()" ];
  18 -> 11 [ label="getLength()" ];
  18 -> 11 [ label="hasFrontCoupling()" ];
  18 -> 11 [ label="hasBackCoupling()" ];
  18 -> 8 [ label="new VisualRepresentation(java.lang.String[])" ];
  18 -> 13 [ label="->SPACE" ];
  8 -> 13 [ label="->SPACE" ];
  19 -> 20 [ label="start#0" ];
  19 -> 20 [ label="end#0" ];
  19 -> 20 [ label="direction#0" ];
  19 -> 21 [ label="nextTrack#0" ];
  19 -> 21 [ label="previousTrack#0" ];
  19 -> 21 [ label="new Track()" ];
  19 -> 20 [ label="equals(java.lang.Object)" ];
  19 -> 21 [ label="remove()" ];
  19 -> 20 [ label="subtract(edu.kit.informatik.model.Vector)" ];
  19 -> 20 [ label="getX()" ];
  19 -> 20 [ label="getY()" ];
  19 -> 20 [ label="normalize()" ];
  19 -> 20 [ label="length()" ];
  19 -> 20 [ label="inverted()" ];
  19 -> 21 [ label="equals(java.lang.Object)" ];
  19 -> 21 [ label="getId()" ];
  19 -> 22 [ label="new TrackException(java.lang.String)" ];
  19 -> 13 [ label="->SPACE" ];
  19 -> 13 [ label="->ARROW" ];
  23 -> 20 [ label="start#0" ];
  23 -> 20 [ label="straightEnd#0" ];
  23 -> 20 [ label="divergingEnd#0" ];
  23 -> 20 [ label="currentPosition#0" ];
  23 -> 20 [ label="currentDirection#0" ];
  23 -> 21 [ label="previousTrack#0" ];
  23 -> 21 [ label="nextStraightTrack#0" ];
  23 -> 21 [ label="nextDivergingTrack#0" ];
  23 -> 21 [ label="new Track()" ];
  23 -> 20 [ label="equals(java.lang.Object)" ];
  23 -> 21 [ label="remove()" ];
  23 -> 20 [ label="subtract(edu.kit.informatik.model.Vector)" ];
  23 -> 20 [ label="getX()" ];
  23 -> 20 [ label="getY()" ];
  23 -> 20 [ label="length()" ];
  23 -> 21 [ label="equals(java.lang.Object)" ];
  23 -> 20 [ label="normalize()" ];
  23 -> 21 [ label="getId()" ];
  23 -> 22 [ label="new TrackException(java.lang.String)" ];
  23 -> 13 [ label="->SPACE" ];
  23 -> 13 [ label="->ARROW" ];
  23 -> 13 [ label="->COMMA" ];
  21 -> 10 [ label="ID_SUPPLIER#0" ];
  21 -> 10 [ label="nextId()" ];
  21 -> 10 [ label="removeId(int)" ];
  21 -> 20 [ label="equals(java.lang.Object)" ];
  21 -> 20 [ label="getX()" ];
  21 -> 20 [ label="length()" ];
  21 -> 20 [ label="subtract(edu.kit.informatik.model.Vector)" ];
  21 -> 20 [ label="getY()" ];
  21 -> 10 [ label="new IdSupplier()" ];
  21 -> 20 [ label="->UP" ];
  21 -> 20 [ label="->DOWN" ];
  21 -> 20 [ label="->RIGHT" ];
  21 -> 20 [ label="->LEFT" ];
  22 -> 5 [ label="new CommandException(java.lang.String)" ];
  12 -> 10 [ label="ID_SUPPLIER#0" ];
  12 -> 11 [ label="parts#1" ];
  12 -> 24 [ label="trainPoints#1" ];
  12 -> 10 [ label="nextId()" ];
  12 -> 11 [ label="getTrain()" ];
  12 -> 11 [ label="setTrain(edu.kit.informatik.model.train.Train)" ];
  12 -> 11 [ label="canBeFollowedBy(edu.kit.informatik.model.rollingstock.RollingStock)" ];
  12 -> 11 [ label="isPowered()" ];
  12 -> 24 [ label="getPosition()" ];
  12 -> 10 [ label="removeId(int)" ];
  12 -> 8 [ label="getHeight()" ];
  12 -> 11 [ label="getVisualRepresentation()" ];
  12 -> 8 [ label="getLine(int)" ];
  12 -> 24 [ label="getDirection()" ];
  12 -> 20 [ label="inverted()" ];
  12 -> 21 [ label="isPointOnTrack(edu.kit.informatik.model.Vector)" ];
  12 -> 24 [ label="getTrack()" ];
  12 -> 20 [ label="add(edu.kit.informatik.model.Vector)" ];
  12 -> 21 [ label="findConnectedTrack(edu.kit.informatik.model.Vector)" ];
  12 -> 20 [ label="normalize()" ];
  12 -> 20 [ label="subtract(edu.kit.informatik.model.Vector)" ];
  12 -> 21 [ label="getOtherActiveEnd(edu.kit.informatik.model.Vector)" ];
  12 -> 10 [ label="new IdSupplier()" ];
  12 -> 17 [ label="new TrainException(java.lang.String)" ];
  12 -> 24 [ label="new TrainPoint(edu.kit.informatik.model.Vector,edu.kit.informatik.model.Vector,edu.kit.informatik.model.track.Track)" ];
  12 -> 13 [ label="->SPACE" ];
  12 -> 13 [ label="->NEW_LINE" ];
  24 -> 20 [ label="position#0" ];
  24 -> 20 [ label="direction#0" ];
  24 -> 21 [ label="track#0" ];
  24 -> 20 [ label="normalize()" ];
  24 -> 21 [ label="getAllPoints()" ];
  24 -> 21 [ label="findConnectedTrack(edu.kit.informatik.model.Vector)" ];
  25 -> 12 [ label="collisions#2" ];
  20 -> 13 [ label="->LEFT_BRACKET" ];
  20 -> 13 [ label="->COMMA" ];
  20 -> 13 [ label="->RIGHT_BRACKET" ];
  26 -> 9 [ label="coaches#1" ];
  26 -> 15 [ label="engines#1" ];
  26 -> 18 [ label="trainSets#1" ];
  26 -> 16 [ label="getId()" ];
  26 -> 9 [ label="getId()" ];
  26 -> 9 [ label="remove()" ];
  26 -> 11 [ label="getId()" ];
  26 -> 15 [ label="new Engine(int,boolean,boolean,java.lang.String,java.lang.String,edu.kit.informatik.model.rollingstock.Engine$Type)" ];
  26 -> 17 [ label="new TrainException(java.lang.String)" ];
  26 -> 9 [ label="new Coach(int,boolean,boolean,edu.kit.informatik.model.rollingstock.Coach$Type)" ];
  26 -> 18 [ label="new TrainSet(int,boolean,boolean,java.lang.String,java.lang.String)" ];
  27 -> 21 [ label="tracks#1" ];
  27 -> 21 [ label="trackStates#1" ];
  27 -> 12 [ label="trackStates#1" ];
  27 -> 21 [ label="getId()" ];
  27 -> 21 [ label="getAllConnectedTracks()" ];
  27 -> 21 [ label="removeConnectedTrack(edu.kit.informatik.model.track.Track)" ];
  27 -> 21 [ label="remove()" ];
  27 -> 21 [ label="setDirection(edu.kit.informatik.model.Vector)" ];
  27 -> 12 [ label="derail()" ];
  27 -> 21 [ label="getDirection()" ];
  27 -> 12 [ label="isPlacedOnTrack()" ];
  27 -> 12 [ label="moveBackwards()" ];
  27 -> 12 [ label="moveForward()" ];
  27 -> 25 [ label="addCollision(edu.kit.informatik.model.train.Train[])" ];
  27 -> 12 [ label="getTrainPoints()" ];
  27 -> 24 [ label="getPosition()" ];
  27 -> 12 [ label="equals(java.lang.Object)" ];
  27 -> 24 [ label="getOccupiedTracks()" ];
  27 -> 21 [ label="equals(java.lang.Object)" ];
  27 -> 21 [ label="setConnectedTrack(edu.kit.informatik.model.Vector,edu.kit.informatik.model.track.Track)" ];
  27 -> 21 [ label="getAllPoints()" ];
  27 -> 21 [ label="findConnectedTrack(edu.kit.informatik.model.Vector)" ];
  27 -> 19 [ label="new StandardTrack(edu.kit.informatik.model.Vector,edu.kit.informatik.model.Vector)" ];
  27 -> 22 [ label="new TrackException(java.lang.String)" ];
  27 -> 23 [ label="new Switch(edu.kit.informatik.model.Vector,edu.kit.informatik.model.Vector,edu.kit.informatik.model.Vector)" ];
  27 -> 25 [ label="new Collisions()" ];
  28 -> 27 [ label="trackRepository#0" ];
  28 -> 26 [ label="rollingStockRepository#0" ];
  28 -> 12 [ label="trains#1" ];
  28 -> 27 [ label="addStandardTrack(edu.kit.informatik.model.Vector,edu.kit.informatik.model.Vector)" ];
  28 -> 27 [ label="recalculateTrackOccupation(java.util.Collection)" ];
  28 -> 27 [ label="addSwitch(edu.kit.informatik.model.Vector,edu.kit.informatik.model.Vector,edu.kit.informatik.model.Vector)" ];
  28 -> 27 [ label="removeTrack(int)" ];
  28 -> 27 [ label="getTracks()" ];
  28 -> 27 [ label="setSwitch(int,edu.kit.informatik.model.Vector)" ];
  28 -> 26 [ label="createEngine(edu.kit.informatik.model.rollingstock.Engine$Type,java.lang.String,java.lang.String,int,boolean,boolean)" ];
  28 -> 26 [ label="createCoach(edu.kit.informatik.model.rollingstock.Coach$Type,int,boolean,boolean)" ];
  28 -> 26 [ label="createTrainSet(java.lang.String,java.lang.String,int,boolean,boolean)" ];
  28 -> 26 [ label="getCoaches()" ];
  28 -> 26 [ label="getEngines()" ];
  28 -> 26 [ label="getTrainSets()" ];
  28 -> 26 [ label="deleteRollingStock(java.lang.String)" ];
  28 -> 12 [ label="getId()" ];
  28 -> 12 [ label="addPart(edu.kit.informatik.model.rollingstock.RollingStock)" ];
  28 -> 12 [ label="remove()" ];
  28 -> 26 [ label="findRollingStockById(java.lang.String)" ];
  28 -> 12 [ label="derail()" ];
  28 -> 12 [ label="equals(java.lang.Object)" ];
  28 -> 11 [ label="getTrain()" ];
  28 -> 11 [ label="setTrain(edu.kit.informatik.model.train.Train)" ];
  28 -> 27 [ label="isAnySwitchNotSet()" ];
  28 -> 12 [ label="isPlacedOnTrack()" ];
  28 -> 12 [ label="isValid()" ];
  28 -> 20 [ label="normalize()" ];
  28 -> 21 [ label="isPointOnTrack(edu.kit.informatik.model.Vector)" ];
  28 -> 20 [ label="equals(java.lang.Object)" ];
  28 -> 21 [ label="getDirection()" ];
  28 -> 20 [ label="inverted()" ];
  28 -> 12 [ label="placeOnTrack(edu.kit.informatik.model.train.TrainPoint)" ];
  28 -> 27 [ label="findOccupiedTracks(edu.kit.informatik.model.train.Train)" ];
  28 -> 27 [ label="getTrackStates()" ];
  28 -> 27 [ label="moveTrains(boolean,java.util.Collection)" ];
  28 -> 25 [ label="addCollisions(edu.kit.informatik.model.Collisions)" ];
  28 -> 27 [ label="calculateStepCollisions(java.util.Collection)" ];
  28 -> 25 [ label="forEachTrain(java.util.function.Consumer)" ];
  28 -> 12 [ label="getVisualRepresentation()" ];
  28 -> 27 [ label="new TrackRepository()" ];
  28 -> 26 [ label="new RollingStockRepository()" ];
  28 -> 12 [ label="new Train()" ];
  28 -> 17 [ label="new TrainException(java.lang.String)" ];
  28 -> 22 [ label="new TrackException(java.lang.String)" ];
  28 -> 20 [ label="new Vector(int,int)" ];
  28 -> 24 [ label="new TrainPoint(edu.kit.informatik.model.Vector,edu.kit.informatik.model.Vector,edu.kit.informatik.model.track.Track)" ];
  28 -> 25 [ label="new Collisions()" ];
  30 -> 6 [ label="isRunning()" ];
  30 -> 6 [ label="execute(java.lang.String)" ];
  30 -> 29 [ label="readLine()" ];
  30 -> 29 [ label="printError(java.lang.String)" ];
  30 -> 6 [ label="register(java.lang.String,edu.kit.informatik.cmd.Command)" ];
  30 -> 3 [ label="build()" ];
  30 -> 3 [ label="addIntParameter()" ];
  30 -> 3 [ label="sep(java.lang.String)" ];
  30 -> 4 [ label="command(java.lang.String)" ];
  30 -> 28 [ label="doSteps(int)" ];
  30 -> 25 [ label="forEachCollision(java.util.function.Consumer)" ];
  30 -> 28 [ label="getTrains()" ];
  30 -> 12 [ label="getId()" ];
  30 -> 12 [ label="getHeadPosition()" ];
  30 -> 29 [ label="printLine(java.lang.Object)" ];
  30 -> 3 [ label="addPointParameter()" ];
  30 -> 28 [ label="addStandardTrack(edu.kit.informatik.model.Vector,edu.kit.informatik.model.Vector)" ];
  30 -> 21 [ label="getId()" ];
  30 -> 28 [ label="addSwitch(edu.kit.informatik.model.Vector,edu.kit.informatik.model.Vector,edu.kit.informatik.model.Vector)" ];
  30 -> 28 [ label="removeTrack(int)" ];
  30 -> 28 [ label="getTracks()" ];
  30 -> 28 [ label="setSwitch(int,edu.kit.informatik.model.Vector)" ];
  30 -> 3 [ label="addBooleanParameter()" ];
  30 -> 3 [ label="addStringParameter()" ];
  30 -> 3 [ label="addEnumParameter(java.lang.Class)" ];
  30 -> 28 [ label="createEngine(edu.kit.informatik.model.rollingstock.Engine$Type,java.lang.String,java.lang.String,int,boolean,boolean)" ];
  30 -> 14 [ label="valueOf(java.lang.String)" ];
  30 -> 16 [ label="getId()" ];
  30 -> 28 [ label="getEngines()" ];
  30 -> 28 [ label="createCoach(edu.kit.informatik.model.rollingstock.Coach$Type,int,boolean,boolean)" ];
  30 -> 7 [ label="valueOf(java.lang.String)" ];
  30 -> 9 [ label="getNumericalId()" ];
  30 -> 28 [ label="getCoaches()" ];
  30 -> 28 [ label="createTrainSet(java.lang.String,java.lang.String,int,boolean,boolean)" ];
  30 -> 28 [ label="getTrainSets()" ];
  30 -> 28 [ label="deleteRollingStock(java.lang.String)" ];
  30 -> 28 [ label="addTrain(int,java.lang.String)" ];
  30 -> 28 [ label="findRollingStockById(java.lang.String)" ];
  30 -> 11 [ label="getTypeString()" ];
  30 -> 28 [ label="removeTrain(int)" ];
  30 -> 28 [ label="showTrain(int)" ];
  30 -> 28 [ label="putTrain(int,edu.kit.informatik.model.Vector,int,int)" ];
  30 -> 20 [ label="new Vector(int,int)" ];
  30 -> 5 [ label="new CommandException(java.lang.String,java.lang.Throwable)" ];
  30 -> 5 [ label="new CommandException(java.lang.String)" ];
  30 -> 28 [ label="new Simulation()" ];
  30 -> 6 [ label="new CommandResolver()" ];
  30 -> 13 [ label="->SPACE" ];
  30 -> 13 [ label="->COMMA" ];
  30 -> 13 [ label="->ARROW" ];
}
